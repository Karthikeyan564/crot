// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module mask_gen_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output mask_gen_reg_pkg::mask_gen_reg2hw_t reg2hw, // Write

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import mask_gen_reg_pkg::* ;

  localparam int AW = 3;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [19:0] output_qs;
  logic [4:0] input_pattern_w_wd;
  logic input_pattern_w_we;
  logic input_pattern_wd;
  logic input_pattern_we;
  logic [7:0] input_repeatedpattern_wd;
  logic input_repeatedpattern_we;
  logic input_load_pattern_wd;
  logic input_load_pattern_we;
  logic [1:0] input_mask_type_wd;
  logic input_mask_type_we;
  logic input_next_wd;
  logic input_next_we;
  logic [1:0] input_imgres_wd;
  logic input_imgres_we;

  // Register instances
  // R[output]: V(False)

  prim_subreg #(
    .DW      (20),
    .SWACCESS("RO"),
    .RESVAL  (20'h0)
  ) u_output (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.output.q ),

    // to register interface (read)
    .qs     (output_qs)
  );


  // R[input]: V(False)

  //   F[pattern_w]: 4:0
  prim_subreg #(
    .DW      (5),
    .SWACCESS("WO"),
    .RESVAL  (5'h0)
  ) u_input_pattern_w (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (input_pattern_w_we),
    .wd     (input_pattern_w_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.input.pattern_w.q ),

    .qs     ()
  );


  //   F[pattern]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_input_pattern (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (input_pattern_we),
    .wd     (input_pattern_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.input.pattern.q ),

    .qs     ()
  );


  //   F[repeatedpattern]: 13:6
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_input_repeatedpattern (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (input_repeatedpattern_we),
    .wd     (input_repeatedpattern_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.input.repeatedpattern.q ),

    .qs     ()
  );


  //   F[load_pattern]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_input_load_pattern (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (input_load_pattern_we),
    .wd     (input_load_pattern_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.input.load_pattern.q ),

    .qs     ()
  );


  //   F[mask_type]: 16:15
  prim_subreg #(
    .DW      (2),
    .SWACCESS("WO"),
    .RESVAL  (2'h0)
  ) u_input_mask_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (input_mask_type_we),
    .wd     (input_mask_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.input.mask_type.q ),

    .qs     ()
  );


  //   F[next]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_input_next (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (input_next_we),
    .wd     (input_next_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.input.next.q ),

    .qs     ()
  );


  //   F[imgres]: 19:18
  prim_subreg #(
    .DW      (2),
    .SWACCESS("WO"),
    .RESVAL  (2'h0)
  ) u_input_imgres (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (input_imgres_we),
    .wd     (input_imgres_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.input.imgres.q ),

    .qs     ()
  );




  logic [1:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == MASK_GEN_OUTPUT_OFFSET);
    addr_hit[1] = (reg_addr == MASK_GEN_INPUT_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (MASK_GEN_PERMIT[0] != (MASK_GEN_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (MASK_GEN_PERMIT[1] != (MASK_GEN_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
  end


  assign input_pattern_w_we = addr_hit[1] & reg_we & ~wr_err;
  assign input_pattern_w_wd = reg_wdata[4:0];

  assign input_pattern_we = addr_hit[1] & reg_we & ~wr_err;
  assign input_pattern_wd = reg_wdata[5];

  assign input_repeatedpattern_we = addr_hit[1] & reg_we & ~wr_err;
  assign input_repeatedpattern_wd = reg_wdata[13:6];

  assign input_load_pattern_we = addr_hit[1] & reg_we & ~wr_err;
  assign input_load_pattern_wd = reg_wdata[14];

  assign input_mask_type_we = addr_hit[1] & reg_we & ~wr_err;
  assign input_mask_type_wd = reg_wdata[16:15];

  assign input_next_we = addr_hit[1] & reg_we & ~wr_err;
  assign input_next_wd = reg_wdata[17];

  assign input_imgres_we = addr_hit[1] & reg_we & ~wr_err;
  assign input_imgres_wd = reg_wdata[19:18];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[19:0] = output_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[4:0] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[13:6] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[16:15] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[19:18] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule
